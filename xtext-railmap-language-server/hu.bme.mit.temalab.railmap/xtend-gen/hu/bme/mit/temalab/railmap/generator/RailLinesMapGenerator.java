/**
 * generated by Xtext 2.12.0
 */
package hu.bme.mit.temalab.railmap.generator;

import com.google.common.collect.Iterables;
import hu.bme.mit.temalab.railmap.railLinesMap.Connection;
import hu.bme.mit.temalab.railmap.railLinesMap.Location;
import hu.bme.mit.temalab.railmap.railLinesMap.RailLineMap;
import hu.bme.mit.temalab.railmap.railLinesMap.Station;
import hu.bme.mit.temalab.railmap.railLinesMap.StationTrackLocation;
import hu.bme.mit.temalab.railmap.railLinesMap.Turnout;
import hu.bme.mit.temalab.railmap.railLinesMap.TurnoutEndLocation;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RailLinesMapGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Consumer<RailLineMap> _function = (RailLineMap it) -> {
      int nextSemaphore = 0;
      String _mapName = it.getMapName();
      String _plus = (_mapName + ".dot");
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("digraph railMap {");
      _builder.newLine();
      {
        EList<Station> _stations = it.getStations();
        for(final Station station : _stations) {
          _builder.append("\t");
          String _name = station.getName();
          _builder.append(_name, "\t");
          _builder.append(" [label=\"");
          String _name_1 = station.getName();
          _builder.append(_name_1, "\t");
          _builder.append(" ");
          {
            int _tracks = station.getTracks();
            IntegerRange _upTo = new IntegerRange(1, _tracks);
            for(final Integer track : _upTo) {
              _builder.append("|<t");
              _builder.append(track, "\t");
              _builder.append("> track ");
              _builder.append(track, "\t");
              _builder.append(" ");
            }
          }
          _builder.append("\"][shape=record];");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        EList<Turnout> _turnouts = it.getTurnouts();
        for(final Turnout turnout : _turnouts) {
          _builder.append("\t");
          String _name_2 = turnout.getName();
          _builder.append(_name_2, "\t");
          _builder.append(" [label=\"");
          String _name_3 = turnout.getName();
          _builder.append(_name_3, "\t");
          _builder.append("\"][shape=promoter];");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        EList<Connection> _connections = it.getConnections();
        for(final Connection connection : _connections) {
          _builder.append("\t");
          CharSequence _printLoc = this.printLoc(connection.getSrc());
          _builder.append(_printLoc, "\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          {
            int _length = connection.getLength();
            IntegerRange _upTo_1 = new IntegerRange(1, _length);
            for(final Integer semaphore : _upTo_1) {
              _builder.append(" -> sem");
              int _plusPlus = nextSemaphore++;
              _builder.append(_plusPlus, "\t");
            }
          }
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append(" ");
          _builder.append("-> ");
          CharSequence _printLoc_1 = this.printLoc(connection.getDst());
          _builder.append(_printLoc_1, "\t ");
          _builder.append(" [label=\"");
          String _name_4 = connection.getGauge().getName();
          _builder.append(_name_4, "\t ");
          _builder.append("\"] ");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("}");
      _builder.newLine();
      fsa.generateFile(_plus, _builder);
    };
    Iterables.<RailLineMap>filter(resource.getContents(), RailLineMap.class).forEach(_function);
  }
  
  public CharSequence printLoc(final Location loc) {
    CharSequence _xifexpression = null;
    if ((loc instanceof TurnoutEndLocation)) {
      _xifexpression = ((TurnoutEndLocation)loc).getTurnout().getName();
    } else {
      CharSequence _xifexpression_1 = null;
      if ((loc instanceof StationTrackLocation)) {
        StringConcatenation _builder = new StringConcatenation();
        String _name = ((StationTrackLocation)loc).getStation().getName();
        _builder.append(_name);
        _builder.append(":t");
        int _track = ((StationTrackLocation)loc).getTrack();
        _builder.append(_track);
        _xifexpression_1 = _builder;
      } else {
        _xifexpression_1 = "";
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
