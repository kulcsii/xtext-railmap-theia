/**
 * generated by Xtext 2.20.0-SNAPSHOT
 */
package hu.bme.mit.temalab.railmap.railLinesMap.impl;

import hu.bme.mit.temalab.railmap.railLinesMap.Connection;
import hu.bme.mit.temalab.railmap.railLinesMap.RailLineMap;
import hu.bme.mit.temalab.railmap.railLinesMap.RailLinesMapPackage;
import hu.bme.mit.temalab.railmap.railLinesMap.Station;
import hu.bme.mit.temalab.railmap.railLinesMap.Turnout;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rail Line Map</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.temalab.railmap.railLinesMap.impl.RailLineMapImpl#getMapName <em>Map Name</em>}</li>
 *   <li>{@link hu.bme.mit.temalab.railmap.railLinesMap.impl.RailLineMapImpl#getStations <em>Stations</em>}</li>
 *   <li>{@link hu.bme.mit.temalab.railmap.railLinesMap.impl.RailLineMapImpl#getTurnouts <em>Turnouts</em>}</li>
 *   <li>{@link hu.bme.mit.temalab.railmap.railLinesMap.impl.RailLineMapImpl#getConnections <em>Connections</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RailLineMapImpl extends MinimalEObjectImpl.Container implements RailLineMap
{
  /**
   * The default value of the '{@link #getMapName() <em>Map Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMapName()
   * @generated
   * @ordered
   */
  protected static final String MAP_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMapName() <em>Map Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMapName()
   * @generated
   * @ordered
   */
  protected String mapName = MAP_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getStations() <em>Stations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStations()
   * @generated
   * @ordered
   */
  protected EList<Station> stations;

  /**
   * The cached value of the '{@link #getTurnouts() <em>Turnouts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTurnouts()
   * @generated
   * @ordered
   */
  protected EList<Turnout> turnouts;

  /**
   * The cached value of the '{@link #getConnections() <em>Connections</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnections()
   * @generated
   * @ordered
   */
  protected EList<Connection> connections;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RailLineMapImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RailLinesMapPackage.Literals.RAIL_LINE_MAP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMapName()
  {
    return mapName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMapName(String newMapName)
  {
    String oldMapName = mapName;
    mapName = newMapName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RailLinesMapPackage.RAIL_LINE_MAP__MAP_NAME, oldMapName, mapName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Station> getStations()
  {
    if (stations == null)
    {
      stations = new EObjectContainmentEList<Station>(Station.class, this, RailLinesMapPackage.RAIL_LINE_MAP__STATIONS);
    }
    return stations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Turnout> getTurnouts()
  {
    if (turnouts == null)
    {
      turnouts = new EObjectContainmentEList<Turnout>(Turnout.class, this, RailLinesMapPackage.RAIL_LINE_MAP__TURNOUTS);
    }
    return turnouts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Connection> getConnections()
  {
    if (connections == null)
    {
      connections = new EObjectContainmentEList<Connection>(Connection.class, this, RailLinesMapPackage.RAIL_LINE_MAP__CONNECTIONS);
    }
    return connections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RailLinesMapPackage.RAIL_LINE_MAP__STATIONS:
        return ((InternalEList<?>)getStations()).basicRemove(otherEnd, msgs);
      case RailLinesMapPackage.RAIL_LINE_MAP__TURNOUTS:
        return ((InternalEList<?>)getTurnouts()).basicRemove(otherEnd, msgs);
      case RailLinesMapPackage.RAIL_LINE_MAP__CONNECTIONS:
        return ((InternalEList<?>)getConnections()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RailLinesMapPackage.RAIL_LINE_MAP__MAP_NAME:
        return getMapName();
      case RailLinesMapPackage.RAIL_LINE_MAP__STATIONS:
        return getStations();
      case RailLinesMapPackage.RAIL_LINE_MAP__TURNOUTS:
        return getTurnouts();
      case RailLinesMapPackage.RAIL_LINE_MAP__CONNECTIONS:
        return getConnections();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RailLinesMapPackage.RAIL_LINE_MAP__MAP_NAME:
        setMapName((String)newValue);
        return;
      case RailLinesMapPackage.RAIL_LINE_MAP__STATIONS:
        getStations().clear();
        getStations().addAll((Collection<? extends Station>)newValue);
        return;
      case RailLinesMapPackage.RAIL_LINE_MAP__TURNOUTS:
        getTurnouts().clear();
        getTurnouts().addAll((Collection<? extends Turnout>)newValue);
        return;
      case RailLinesMapPackage.RAIL_LINE_MAP__CONNECTIONS:
        getConnections().clear();
        getConnections().addAll((Collection<? extends Connection>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RailLinesMapPackage.RAIL_LINE_MAP__MAP_NAME:
        setMapName(MAP_NAME_EDEFAULT);
        return;
      case RailLinesMapPackage.RAIL_LINE_MAP__STATIONS:
        getStations().clear();
        return;
      case RailLinesMapPackage.RAIL_LINE_MAP__TURNOUTS:
        getTurnouts().clear();
        return;
      case RailLinesMapPackage.RAIL_LINE_MAP__CONNECTIONS:
        getConnections().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RailLinesMapPackage.RAIL_LINE_MAP__MAP_NAME:
        return MAP_NAME_EDEFAULT == null ? mapName != null : !MAP_NAME_EDEFAULT.equals(mapName);
      case RailLinesMapPackage.RAIL_LINE_MAP__STATIONS:
        return stations != null && !stations.isEmpty();
      case RailLinesMapPackage.RAIL_LINE_MAP__TURNOUTS:
        return turnouts != null && !turnouts.isEmpty();
      case RailLinesMapPackage.RAIL_LINE_MAP__CONNECTIONS:
        return connections != null && !connections.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (mapName: ");
    result.append(mapName);
    result.append(')');
    return result.toString();
  }

} //RailLineMapImpl
