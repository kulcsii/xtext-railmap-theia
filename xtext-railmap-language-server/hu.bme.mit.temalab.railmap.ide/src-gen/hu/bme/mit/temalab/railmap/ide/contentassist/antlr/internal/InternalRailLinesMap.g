/*
 * generated by Xtext 2.20.0-SNAPSHOT
 */
grammar InternalRailLinesMap;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package hu.bme.mit.temalab.railmap.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.temalab.railmap.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.temalab.railmap.services.RailLinesMapGrammarAccess;

}
@parser::members {
	private RailLinesMapGrammarAccess grammarAccess;

	public void setGrammarAccess(RailLinesMapGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRailLineMap
entryRuleRailLineMap
:
{ before(grammarAccess.getRailLineMapRule()); }
	 ruleRailLineMap
{ after(grammarAccess.getRailLineMapRule()); } 
	 EOF 
;

// Rule RailLineMap
ruleRailLineMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRailLineMapAccess().getGroup()); }
		(rule__RailLineMap__Group__0)
		{ after(grammarAccess.getRailLineMapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStation
entryRuleStation
:
{ before(grammarAccess.getStationRule()); }
	 ruleStation
{ after(grammarAccess.getStationRule()); } 
	 EOF 
;

// Rule Station
ruleStation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStationAccess().getGroup()); }
		(rule__Station__Group__0)
		{ after(grammarAccess.getStationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnection
entryRuleConnection
:
{ before(grammarAccess.getConnectionRule()); }
	 ruleConnection
{ after(grammarAccess.getConnectionRule()); } 
	 EOF 
;

// Rule Connection
ruleConnection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectionAccess().getGroup()); }
		(rule__Connection__Group__0)
		{ after(grammarAccess.getConnectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnout
entryRuleTurnout
:
{ before(grammarAccess.getTurnoutRule()); }
	 ruleTurnout
{ after(grammarAccess.getTurnoutRule()); } 
	 EOF 
;

// Rule Turnout
ruleTurnout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnoutAccess().getGroup()); }
		(rule__Turnout__Group__0)
		{ after(grammarAccess.getTurnoutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLocation
entryRuleLocation
:
{ before(grammarAccess.getLocationRule()); }
	 ruleLocation
{ after(grammarAccess.getLocationRule()); } 
	 EOF 
;

// Rule Location
ruleLocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLocationAccess().getAlternatives()); }
		(rule__Location__Alternatives)
		{ after(grammarAccess.getLocationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStationTrackLocation
entryRuleStationTrackLocation
:
{ before(grammarAccess.getStationTrackLocationRule()); }
	 ruleStationTrackLocation
{ after(grammarAccess.getStationTrackLocationRule()); } 
	 EOF 
;

// Rule StationTrackLocation
ruleStationTrackLocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStationTrackLocationAccess().getGroup()); }
		(rule__StationTrackLocation__Group__0)
		{ after(grammarAccess.getStationTrackLocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnoutEndLocation
entryRuleTurnoutEndLocation
:
{ before(grammarAccess.getTurnoutEndLocationRule()); }
	 ruleTurnoutEndLocation
{ after(grammarAccess.getTurnoutEndLocationRule()); } 
	 EOF 
;

// Rule TurnoutEndLocation
ruleTurnoutEndLocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnoutEndLocationAccess().getGroup()); }
		(rule__TurnoutEndLocation__Group__0)
		{ after(grammarAccess.getTurnoutEndLocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TurnoutEnd
ruleTurnoutEnd
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnoutEndAccess().getAlternatives()); }
		(rule__TurnoutEnd__Alternatives)
		{ after(grammarAccess.getTurnoutEndAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Gauge
ruleGauge
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGaugeAccess().getAlternatives()); }
		(rule__Gauge__Alternatives)
		{ after(grammarAccess.getGaugeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRailLineMapAccess().getStationsAssignment_2_0()); }
		(rule__RailLineMap__StationsAssignment_2_0)
		{ after(grammarAccess.getRailLineMapAccess().getStationsAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getRailLineMapAccess().getTurnoutsAssignment_2_1()); }
		(rule__RailLineMap__TurnoutsAssignment_2_1)
		{ after(grammarAccess.getRailLineMapAccess().getTurnoutsAssignment_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getRailLineMapAccess().getConnectionsAssignment_2_2()); }
		(rule__RailLineMap__ConnectionsAssignment_2_2)
		{ after(grammarAccess.getRailLineMapAccess().getConnectionsAssignment_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocationAccess().getStationTrackLocationParserRuleCall_0()); }
		ruleStationTrackLocation
		{ after(grammarAccess.getLocationAccess().getStationTrackLocationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLocationAccess().getTurnoutEndLocationParserRuleCall_1()); }
		ruleTurnoutEndLocation
		{ after(grammarAccess.getLocationAccess().getTurnoutEndLocationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnoutEnd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnoutEndAccess().getTOPEnumLiteralDeclaration_0()); }
		('top')
		{ after(grammarAccess.getTurnoutEndAccess().getTOPEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTurnoutEndAccess().getSTRAIGHTEnumLiteralDeclaration_1()); }
		('straight')
		{ after(grammarAccess.getTurnoutEndAccess().getSTRAIGHTEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTurnoutEndAccess().getDIVERGENTEnumLiteralDeclaration_2()); }
		('divergent')
		{ after(grammarAccess.getTurnoutEndAccess().getDIVERGENTEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gauge__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGaugeAccess().getSTANDARDEnumLiteralDeclaration_0()); }
		('standard gauge')
		{ after(grammarAccess.getGaugeAccess().getSTANDARDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getGaugeAccess().getNARROWEnumLiteralDeclaration_1()); }
		('narrow gauge')
		{ after(grammarAccess.getGaugeAccess().getNARROWEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getGaugeAccess().getBROADEnumLiteralDeclaration_2()); }
		('broad gauge')
		{ after(grammarAccess.getGaugeAccess().getBROADEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RailLineMap__Group__0__Impl
	rule__RailLineMap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRailLineMapAccess().getRailMapKeyword_0()); }
	'rail-map'
	{ after(grammarAccess.getRailLineMapAccess().getRailMapKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RailLineMap__Group__1__Impl
	rule__RailLineMap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRailLineMapAccess().getMapNameAssignment_1()); }
	(rule__RailLineMap__MapNameAssignment_1)
	{ after(grammarAccess.getRailLineMapAccess().getMapNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RailLineMap__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRailLineMapAccess().getAlternatives_2()); }
	(rule__RailLineMap__Alternatives_2)*
	{ after(grammarAccess.getRailLineMapAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Station__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Station__Group__0__Impl
	rule__Station__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationAccess().getStationKeyword_0()); }
	'station'
	{ after(grammarAccess.getStationAccess().getStationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Station__Group__1__Impl
	rule__Station__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationAccess().getNameAssignment_1()); }
	(rule__Station__NameAssignment_1)
	{ after(grammarAccess.getStationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Station__Group__2__Impl
	rule__Station__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationAccess().getGroup_2()); }
	(rule__Station__Group_2__0)?
	{ after(grammarAccess.getStationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Station__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getStationAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Station__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Station__Group_2__0__Impl
	rule__Station__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationAccess().getWithKeyword_2_0()); }
	'with'
	{ after(grammarAccess.getStationAccess().getWithKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Station__Group_2__1__Impl
	rule__Station__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationAccess().getTracksAssignment_2_1()); }
	(rule__Station__TracksAssignment_2_1)
	{ after(grammarAccess.getStationAccess().getTracksAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Station__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationAccess().getTracksKeyword_2_2()); }
	'tracks'
	{ after(grammarAccess.getStationAccess().getTracksKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Connection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__0__Impl
	rule__Connection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getConnectionKeyword_0()); }
	'connection'
	{ after(grammarAccess.getConnectionAccess().getConnectionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__1__Impl
	rule__Connection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getFromKeyword_1()); }
	'from'
	{ after(grammarAccess.getConnectionAccess().getFromKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__2__Impl
	rule__Connection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getSrcAssignment_2()); }
	(rule__Connection__SrcAssignment_2)
	{ after(grammarAccess.getConnectionAccess().getSrcAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__3__Impl
	rule__Connection__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getConnectionAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__4__Impl
	rule__Connection__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getDstAssignment_4()); }
	(rule__Connection__DstAssignment_4)
	{ after(grammarAccess.getConnectionAccess().getDstAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__5__Impl
	rule__Connection__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getInKeyword_5()); }
	'in'
	{ after(grammarAccess.getConnectionAccess().getInKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__6__Impl
	rule__Connection__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getLengthAssignment_6()); }
	(rule__Connection__LengthAssignment_6)
	{ after(grammarAccess.getConnectionAccess().getLengthAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__7__Impl
	rule__Connection__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getSegmentsKeyword_7()); }
	'segments'
	{ after(grammarAccess.getConnectionAccess().getSegmentsKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__8__Impl
	rule__Connection__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getGaugeAssignment_8()); }
	(rule__Connection__GaugeAssignment_8)?
	{ after(grammarAccess.getConnectionAccess().getGaugeAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getSemicolonKeyword_9()); }
	';'
	{ after(grammarAccess.getConnectionAccess().getSemicolonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Turnout__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turnout__Group__0__Impl
	rule__Turnout__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Turnout__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnoutAccess().getTurnoutKeyword_0()); }
	'turnout'
	{ after(grammarAccess.getTurnoutAccess().getTurnoutKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turnout__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turnout__Group__1__Impl
	rule__Turnout__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Turnout__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnoutAccess().getNameAssignment_1()); }
	(rule__Turnout__NameAssignment_1)
	{ after(grammarAccess.getTurnoutAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turnout__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turnout__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Turnout__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnoutAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getTurnoutAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StationTrackLocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StationTrackLocation__Group__0__Impl
	rule__StationTrackLocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StationTrackLocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationTrackLocationAccess().getStationAssignment_0()); }
	(rule__StationTrackLocation__StationAssignment_0)
	{ after(grammarAccess.getStationTrackLocationAccess().getStationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StationTrackLocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StationTrackLocation__Group__1__Impl
	rule__StationTrackLocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StationTrackLocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationTrackLocationAccess().getTrackKeyword_1()); }
	'track'
	{ after(grammarAccess.getStationTrackLocationAccess().getTrackKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StationTrackLocation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StationTrackLocation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StationTrackLocation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStationTrackLocationAccess().getTrackAssignment_2()); }
	(rule__StationTrackLocation__TrackAssignment_2)
	{ after(grammarAccess.getStationTrackLocationAccess().getTrackAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnoutEndLocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnoutEndLocation__Group__0__Impl
	rule__TurnoutEndLocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnoutEndLocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnoutEndLocationAccess().getTurnoutAssignment_0()); }
	(rule__TurnoutEndLocation__TurnoutAssignment_0)
	{ after(grammarAccess.getTurnoutEndLocationAccess().getTurnoutAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnoutEndLocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnoutEndLocation__Group__1__Impl
	rule__TurnoutEndLocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnoutEndLocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnoutEndLocationAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getTurnoutEndLocationAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnoutEndLocation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnoutEndLocation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnoutEndLocation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnoutEndLocationAccess().getEndAssignment_2()); }
	(rule__TurnoutEndLocation__EndAssignment_2)
	{ after(grammarAccess.getTurnoutEndLocationAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RailLineMap__MapNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRailLineMapAccess().getMapNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getRailLineMapAccess().getMapNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__StationsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRailLineMapAccess().getStationsStationParserRuleCall_2_0_0()); }
		ruleStation
		{ after(grammarAccess.getRailLineMapAccess().getStationsStationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__TurnoutsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRailLineMapAccess().getTurnoutsTurnoutParserRuleCall_2_1_0()); }
		ruleTurnout
		{ after(grammarAccess.getRailLineMapAccess().getTurnoutsTurnoutParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RailLineMap__ConnectionsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRailLineMapAccess().getConnectionsConnectionParserRuleCall_2_2_0()); }
		ruleConnection
		{ after(grammarAccess.getRailLineMapAccess().getConnectionsConnectionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Station__TracksAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStationAccess().getTracksINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getStationAccess().getTracksINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__SrcAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionAccess().getSrcLocationParserRuleCall_2_0()); }
		ruleLocation
		{ after(grammarAccess.getConnectionAccess().getSrcLocationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__DstAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionAccess().getDstLocationParserRuleCall_4_0()); }
		ruleLocation
		{ after(grammarAccess.getConnectionAccess().getDstLocationParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__LengthAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionAccess().getLengthINTTerminalRuleCall_6_0()); }
		RULE_INT
		{ after(grammarAccess.getConnectionAccess().getLengthINTTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__GaugeAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionAccess().getGaugeGaugeEnumRuleCall_8_0()); }
		ruleGauge
		{ after(grammarAccess.getConnectionAccess().getGaugeGaugeEnumRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turnout__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnoutAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTurnoutAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StationTrackLocation__StationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStationTrackLocationAccess().getStationStationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getStationTrackLocationAccess().getStationStationIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStationTrackLocationAccess().getStationStationIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getStationTrackLocationAccess().getStationStationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StationTrackLocation__TrackAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStationTrackLocationAccess().getTrackINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getStationTrackLocationAccess().getTrackINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnoutEndLocation__TurnoutAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnoutEndLocationAccess().getTurnoutTurnoutCrossReference_0_0()); }
		(
			{ before(grammarAccess.getTurnoutEndLocationAccess().getTurnoutTurnoutIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTurnoutEndLocationAccess().getTurnoutTurnoutIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getTurnoutEndLocationAccess().getTurnoutTurnoutCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnoutEndLocation__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnoutEndLocationAccess().getEndTurnoutEndEnumRuleCall_2_0()); }
		ruleTurnoutEnd
		{ after(grammarAccess.getTurnoutEndLocationAccess().getEndTurnoutEndEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
