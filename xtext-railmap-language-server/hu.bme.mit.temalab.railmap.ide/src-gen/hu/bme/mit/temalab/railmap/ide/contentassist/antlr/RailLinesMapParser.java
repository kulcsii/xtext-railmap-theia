/*
 * generated by Xtext 2.20.0-SNAPSHOT
 */
package hu.bme.mit.temalab.railmap.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import hu.bme.mit.temalab.railmap.ide.contentassist.antlr.internal.InternalRailLinesMapParser;
import hu.bme.mit.temalab.railmap.services.RailLinesMapGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RailLinesMapParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RailLinesMapGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RailLinesMapGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRailLineMapAccess().getAlternatives_2(), "rule__RailLineMap__Alternatives_2");
			builder.put(grammarAccess.getLocationAccess().getAlternatives(), "rule__Location__Alternatives");
			builder.put(grammarAccess.getTurnoutEndAccess().getAlternatives(), "rule__TurnoutEnd__Alternatives");
			builder.put(grammarAccess.getGaugeAccess().getAlternatives(), "rule__Gauge__Alternatives");
			builder.put(grammarAccess.getRailLineMapAccess().getGroup(), "rule__RailLineMap__Group__0");
			builder.put(grammarAccess.getStationAccess().getGroup(), "rule__Station__Group__0");
			builder.put(grammarAccess.getStationAccess().getGroup_2(), "rule__Station__Group_2__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getTurnoutAccess().getGroup(), "rule__Turnout__Group__0");
			builder.put(grammarAccess.getStationTrackLocationAccess().getGroup(), "rule__StationTrackLocation__Group__0");
			builder.put(grammarAccess.getTurnoutEndLocationAccess().getGroup(), "rule__TurnoutEndLocation__Group__0");
			builder.put(grammarAccess.getRailLineMapAccess().getMapNameAssignment_1(), "rule__RailLineMap__MapNameAssignment_1");
			builder.put(grammarAccess.getRailLineMapAccess().getStationsAssignment_2_0(), "rule__RailLineMap__StationsAssignment_2_0");
			builder.put(grammarAccess.getRailLineMapAccess().getTurnoutsAssignment_2_1(), "rule__RailLineMap__TurnoutsAssignment_2_1");
			builder.put(grammarAccess.getRailLineMapAccess().getConnectionsAssignment_2_2(), "rule__RailLineMap__ConnectionsAssignment_2_2");
			builder.put(grammarAccess.getStationAccess().getNameAssignment_1(), "rule__Station__NameAssignment_1");
			builder.put(grammarAccess.getStationAccess().getTracksAssignment_2_1(), "rule__Station__TracksAssignment_2_1");
			builder.put(grammarAccess.getConnectionAccess().getSrcAssignment_2(), "rule__Connection__SrcAssignment_2");
			builder.put(grammarAccess.getConnectionAccess().getDstAssignment_4(), "rule__Connection__DstAssignment_4");
			builder.put(grammarAccess.getConnectionAccess().getLengthAssignment_6(), "rule__Connection__LengthAssignment_6");
			builder.put(grammarAccess.getConnectionAccess().getGaugeAssignment_8(), "rule__Connection__GaugeAssignment_8");
			builder.put(grammarAccess.getTurnoutAccess().getNameAssignment_1(), "rule__Turnout__NameAssignment_1");
			builder.put(grammarAccess.getStationTrackLocationAccess().getStationAssignment_0(), "rule__StationTrackLocation__StationAssignment_0");
			builder.put(grammarAccess.getStationTrackLocationAccess().getTrackAssignment_2(), "rule__StationTrackLocation__TrackAssignment_2");
			builder.put(grammarAccess.getTurnoutEndLocationAccess().getTurnoutAssignment_0(), "rule__TurnoutEndLocation__TurnoutAssignment_0");
			builder.put(grammarAccess.getTurnoutEndLocationAccess().getEndAssignment_2(), "rule__TurnoutEndLocation__EndAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RailLinesMapGrammarAccess grammarAccess;

	@Override
	protected InternalRailLinesMapParser createParser() {
		InternalRailLinesMapParser result = new InternalRailLinesMapParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RailLinesMapGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RailLinesMapGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
